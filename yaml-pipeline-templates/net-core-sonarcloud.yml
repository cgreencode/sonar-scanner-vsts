# .NET Core with SonarCloud analysis
# Build and run tests for .NET Core solutions
# and analyse on SonarCloud
#
# * If necessary, create an endpoint to connect to SonarCloud
#
# * Set the sonarCloudXXX variables below
# 
# * Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  testProjects: '**/*Tests/*.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

  sonarCloudEndpointName: 'SC'
  sonarCloudOrganization: 'my-org'
  sonarCloudProjectKey: 'my-projectkey1'
  sonarCloudProjectName: 'My Project'

steps:
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '$(solution)' # Comes from variables section defined above.
    feedsToUse: 'select'

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: '$(sonarCloudEndpointName)'
    organization: '$(sonarCloudOrganization)'
    projectKey: '$(sonarCloudProjectKey)'
    projectName: '$(sonarCloudProjectName)'
    scannerMode: MSBuild # 'Other' # = maven
    # Additional properties that will be passed to the scanner,
    # Put one key=value per line, example:
    # sonar.exclusions=**/*.bin
    extraProperties: 

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '$(solution)' # Comes from variables section defined above.
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '$(testProjects)' # Comes from variables section defined above.
    arguments: '--configuration $(BuildConfiguration) --collect "Code Coverage"'

- task: SonarCloudAnalyze@1

# Uncomment the next task to wait until SonarCloud processing has
# finished and to publish the result on the Pipeline build summary
#- task: SonarCloudPublish@1
#  inputs:
#    pollingTimeoutSec: '300'